aplplot
=======

A GNU APL extension that provides plotting capability


For build and installation instructions, see the INSTALL file.

To use the aplplot package, you need associate the library with an APL function 
name:

	 'libaplplot.so' ⎕FX  'plot'

after which you can use it just like any other function:

	   plot a

	Where a is:

		1. A simple numeric vector, yielding a simple x-origin-0 graph
			of those values.

		2. An n-by-2 numeric array, yielding an XY plot of those values.

		3. A vector of complex values, yielding a 3-space plot.

		Other capabilities will be added as time goes on.

	For example:

		'libaplplot.so' ⎕FX 'plot'
		c←2○(⍳128)÷6
		s←1○2×(⍳128)÷6
		plot c+s×0J1

	will get you, in a separate window, a fancy 3-space plot image of a 
	complex-space Lissajous pattern.


Options may be passed to the functions using a left argument:

	  'options' plot a

	Like above but with a semicolon-separated list of options to control
	the plot.  At the moment, these options are supported:

		* 'width <value>' where <value> is an interger plot width.
		        If the argument is omitted, the option is ignored.

		* 'height <value>' where <value> is an interger plot height.
		        If the argument is omitted, the option is ignored.

		* 'dims <width> <height' combining the above into one
		        operation.  If either argument is omitted, the option
		        is ignored.

		* 'xlabel <x-axis label>' where <> is a string to use as the 
		        x-axis label.  Enclosed in double-quotes ("") if the 
			string contains spaces.  If the argument is omitted,
			the label is cleared.

		* 'ylabel <x-axis label>' y-axis label.

		* 'tlabel <x-axis label>' top label.

		* 'xlog <state>'  If the <state> is "on" or omitted, make
		        the x-axis logarithmic.  If the state is "off," make
			the x axis linear.  "logx" is a synonym for "xlog."

		* 'ylog <state>'  See the xlog option.

		* 'xcol <column>'  Given a multi-column right argument, sets
			which column to use as the x values.  If set to -1 or
			if the argument is omitted, an x-axis is synthesized.

		* 'file <filename>'  Specifies a file name for output
		  	destinations.

		* 'dest <dest>'  Specifies an output format and must be one of
		  	screen, png, pdf, svg, eps, or ps.

		* 'bgblack'  Sets the background to black (the default).
		
		* 'bgwhite'  Sets the background to white.
		
		* 'background <r> <g> <b>'  Sets the background to the specifed
		  	color, where r, g, and b are all in the range of
			0 - 255, inclusive.
		
		* 'mode <mode>'  Sets the plot mode to either polar or
		        cartesian.  <mode> is either "polar" or "xy;" if
			omitted, defaults to cartesian.  Keywords "polar"
			and "xy" are short-cuts to set the corresponding mode.

		* 'angle_units <units>'  Sets the interpretation of theta in
		        polar plots to degress, radians, or pi-radians.  Any
			argument beginning with "d," "r," or "p" will do what
			you expect; if the argument is omitted, it defaults to
			radians.  "degrees," "radians," and "piradians" are
			short-cuts to the corresponding settings.
		
		* 'reset'  Resets all persistent options to default values.
		        It's equivalent to:
			  'dims 512 480; xlabel; ylabel; tlabel;
			     xlog off; ylog off; xcol -1; dest screen;
			     bgblack; mode xy; radians; embed off'

		* 'kill' The plot function returns the process ID (pid) of
		        the process used to display the plot.  Given a right
		 	argument of those pids, the function kills those
			processes and closes the display windows.

		* 'embed <state>' If the <state> is "on" or omitted, embed
		        plots in the transcript.  If the state is "off,"
			display plots normally.

		* 'draw <option>'  Sets the drawing mode to lines, points,
		  	or both, depending on the initial letter, 'l', 'p',
			'b', upper or lower case, of the argument.  If the
			argument is omitted, it defaults to lines.  "lins,"
			"points," or "both" are synonyms.

		* 'xdomain <v1> <v2>'  Sets the default X domain, for XY
		  	 plots, or the theta domain for polar plots.  <v1> is
			 the initial value; <v2> is the span relative to the
			 initial value.  Both values may have a 'p' or a 'P'
			 appended, which has the effect of multiplying the
			 value by pi.  If either argument is omitted, the
			 origin defaults to 0 and the span is derived from
			 shape of the array being plotted.

		All options except "kill" and 'reset' are retained and need
		not be set for subsequent plots. The construct

			   'options' plot ''
			   
		can be used to store options without creating a plot.

		As an example:

			'bgwhite;tlabel "Complex vector"' plot c+s×0J1

		will get you the same plot with a white background instead of 
		black and a top label of "Complex vector".
			

		Other options will be added as time goes on.


	When directed to the screen, the plot function spawns and detaches 
	processes to display the plots; as many plots as you like can be 
	displayed simultaneously.


See http://github.com/ChrisMoller/aplplot/wiki for more examples.

